using DigitalRightsManagement.SourceGenerators;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Collections.Immutable;

namespace DigitalRightsManagement.UnitTests.Analyzers;

public class EntityConstructorGeneratorTests
{
    private const string EntityBaseClass = """
                                           namespace DigitalRightsManagement.Common.DDD
                                           {
                                               using System;

                                               public abstract class Entity
                                               {
                                                   public Guid Id { get; init; }
                                                   protected Entity(Guid id) => Id = id;
                                                   protected Entity() { }
                                               }
                                           }
                                           """;

    [Fact]
    public void Generates_Protected_Constructor_For_Non_Sealed_Entity()
    {
        // Arrange
        const string source = """
                              using DigitalRightsManagement.Common.DDD;

                              namespace TestNamespace
                              {
                                  public partial class TestEntity : Entity { }
                              }
                              """;

        const string expected = """
                                // <auto-generated/>
                                #pragma warning disable CS1591 // Missing XML comment for publicly visible type or member 'AggregateRoot.AggregateRoot()'
                                #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
                                namespace TestNamespace
                                {
                                    partial class TestEntity
                                    {
                                        protected TestEntity() { }
                                    }
                                }
                                """;

        var (diagnostics, output) = GetGeneratedOutput(source);

        // Assert
        Assert.Empty(diagnostics);
        var (filename, content) = Assert.Single(output);
        Assert.Equal("TestEntity.g.cs", filename);
        Assert.Equal(expected, content);
    }

    [Fact]
    public void Generates_Private_Constructor_For_Sealed_Entity()
    {
        // Arrange
        const string source = """
                              using DigitalRightsManagement.Common.DDD;

                              namespace TestNamespace
                              {
                                  public sealed partial class TestEntity : Entity { }
                              }
                              """;

        const string expected = """
                                // <auto-generated/>
                                #pragma warning disable CS1591 // Missing XML comment for publicly visible type or member 'AggregateRoot.AggregateRoot()'
                                #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
                                namespace TestNamespace
                                {
                                    partial class TestEntity
                                    {
                                        private TestEntity() { }
                                    }
                                }
                                """;

        var (diagnostics, output) = GetGeneratedOutput(source);

        // Assert
        Assert.Empty(diagnostics);
        var (filename, content) = Assert.Single(output);
        Assert.Equal("TestEntity.g.cs", filename);
        Assert.Equal(expected, content);
    }

    [Fact]
    public void No_Generation_For_Non_Entity()
    {
        // Arrange
        const string source = """
                              namespace TestNamespace
                              {
                                  public partial class TestClass { }
                              }
                              """;

        var (diagnostics, output) = GetGeneratedOutput(source);

        // Assert
        Assert.Empty(diagnostics);
        Assert.Empty(output);
    }

    [Fact]
    public void Handles_Nested_Namespaces()
    {
        // Arrange
        const string source = """
                              using DigitalRightsManagement.Common.DDD;

                              namespace Outer.Inner
                              {
                                  public partial class TestEntity : Entity { }
                              }
                              """;

        const string expected = """
                                // <auto-generated/>
                                #pragma warning disable CS1591 // Missing XML comment for publicly visible type or member 'AggregateRoot.AggregateRoot()'
                                #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
                                namespace Outer.Inner
                                {
                                    partial class TestEntity
                                    {
                                        protected TestEntity() { }
                                    }
                                }
                                """;

        var (diagnostics, output) = GetGeneratedOutput(source);

        // Assert
        Assert.Empty(diagnostics);
        var (filename, content) = Assert.Single(output);
        Assert.Equal("TestEntity.g.cs", filename);
        Assert.Equal(expected, content);
    }

    [Fact]
    public void Handles_File_Scoped_Namespaces()
    {
        // Arrange
        const string source = """
                              using DigitalRightsManagement.Common.DDD;

                              namespace TestNamespace;

                              public partial class TestEntity : Entity { }
                              """;

        const string expected = """
                                // <auto-generated/>
                                #pragma warning disable CS1591 // Missing XML comment for publicly visible type or member 'AggregateRoot.AggregateRoot()'
                                #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
                                namespace TestNamespace
                                {
                                    partial class TestEntity
                                    {
                                        protected TestEntity() { }
                                    }
                                }
                                """;

        var (diagnostics, output) = GetGeneratedOutput(source);

        // Assert
        Assert.Empty(diagnostics);
        var (filename, content) = Assert.Single(output);
        Assert.Equal("TestEntity.g.cs", filename);
        Assert.Equal(expected, content);
    }

    private static (ImmutableArray<Diagnostic> Diagnostics, List<(string filename, string content)> Output)
        GetGeneratedOutput(params string[] sources)
    {
        var allSources = sources.Append(EntityBaseClass);
        var references = AppDomain.CurrentDomain.GetAssemblies()
            .Where(assembly => !assembly.IsDynamic)
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location));

        var compilation = CSharpCompilation.Create(
            "TestAssembly",
            allSources.Select(source => CSharpSyntaxTree.ParseText(source)),
            references,
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        var generator = new EntityConstructorGenerator();
        GeneratorDriver driver = CSharpGeneratorDriver.Create(generator);
        driver = driver.RunGenerators(compilation);

        var result = driver.GetRunResult();
        var generatedFiles = result.Results.SelectMany(r => r.GeneratedSources)
            .Select(f => (f.HintName, f.SourceText.ToString()))
            .ToList();

        return (compilation.GetDiagnostics(), generatedFiles);
    }
}
