using DigitalRightsManagement.SourceGenerators;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Shouldly;
using System.Collections.Immutable;
using static DigitalRightsManagement.UnitTests.Analyzers.AnalyzerConstants;

namespace DigitalRightsManagement.UnitTests.Analyzers;

public class EntityConstructorGeneratorTests
{
    [Fact]
    public void Generates_Protected_Constructor_For_Non_Sealed_Entity()
    {
        // Arrange
        const string source = """
                        using DigitalRightsManagement.Common.DDD;

                        namespace TestNamespace
                        {
                            public partial class TestEntity : Entity { }
                        }
                        """;

        const string expected = """
                        // <auto-generated/>
                        #pragma warning disable CS1591 // Missing XML comment for publicly visible type or member 'AggregateRoot.AggregateRoot()'
                        #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
                        namespace TestNamespace
                        {
                            partial class TestEntity
                            {
                                protected TestEntity() { }
                            }
                        }
                        """;

        var (diagnostics, output) = GetGeneratedOutput(source);

        // Assert
        diagnostics.ShouldBeEmpty();
        var (filename, content) = output.ShouldHaveSingleItem();
        filename.ShouldBe("TestEntity.g.cs");
        content.ShouldBe(expected);
    }

    [Fact]
    public void Generates_Private_Constructor_For_Sealed_Entity()
    {
        // Arrange
        const string source = """
                        using DigitalRightsManagement.Common.DDD;

                        namespace TestNamespace
                        {
                            public sealed partial class TestEntity : Entity { }
                        }
                        """;

        const string expected = """
                        // <auto-generated/>
                        #pragma warning disable CS1591 // Missing XML comment for publicly visible type or member 'AggregateRoot.AggregateRoot()'
                        #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
                        namespace TestNamespace
                        {
                            partial class TestEntity
                            {
                                private TestEntity() { }
                            }
                        }
                        """;

        var (diagnostics, output) = GetGeneratedOutput(source);

        // Assert
        diagnostics.ShouldBeEmpty();
        var (filename, content) = output.ShouldHaveSingleItem();
        filename.ShouldBe("TestEntity.g.cs");
        content.ShouldBe(expected);
    }

    [Fact]
    public void No_Generation_For_Non_Entity()
    {
        // Arrange
        const string source = """
                        namespace TestNamespace
                        {
                            public partial class TestClass { }
                        }
                        """;

        var (diagnostics, output) = GetGeneratedOutput(source);

        // Assert
        diagnostics.ShouldBeEmpty();
        output.ShouldBeEmpty();
    }

    [Fact]
    public void Handles_Nested_Namespaces()
    {
        // Arrange
        const string source = """
                        using DigitalRightsManagement.Common.DDD;

                        namespace Outer.Inner
                        {
                            public partial class TestEntity : Entity { }
                        }
                        """;

        const string expected = """
                        // <auto-generated/>
                        #pragma warning disable CS1591 // Missing XML comment for publicly visible type or member 'AggregateRoot.AggregateRoot()'
                        #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
                        namespace Outer.Inner
                        {
                            partial class TestEntity
                            {
                                protected TestEntity() { }
                            }
                        }
                        """;

        var (diagnostics, output) = GetGeneratedOutput(source);

        // Assert
        diagnostics.ShouldBeEmpty();
        var (filename, content) = output.ShouldHaveSingleItem();
        filename.ShouldBe("TestEntity.g.cs");
        content.ShouldBe(expected);
    }

    [Fact]
    public void Handles_File_Scoped_Namespaces()
    {
        // Arrange
        const string source = """
                        using DigitalRightsManagement.Common.DDD;

                        namespace TestNamespace;

                        public partial class TestEntity : Entity { }
                        """;

        const string expected = """
                        // <auto-generated/>
                        #pragma warning disable CS1591 // Missing XML comment for publicly visible type or member 'AggregateRoot.AggregateRoot()'
                        #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
                        namespace TestNamespace
                        {
                            partial class TestEntity
                            {
                                protected TestEntity() { }
                            }
                        }
                        """;

        var (diagnostics, output) = GetGeneratedOutput(source);

        // Assert
        diagnostics.ShouldBeEmpty();
        var (filename, content) = output.ShouldHaveSingleItem();
        filename.ShouldBe("TestEntity.g.cs");
        content.ShouldBe(expected);
    }

    private static (ImmutableArray<Diagnostic> Diagnostics, List<(string filename, string content)> Output)
        GetGeneratedOutput(params string[] sources)
    {
        var allSources = sources.Append(EntityBaseClass);
        var references = AppDomain.CurrentDomain.GetAssemblies()
            .Where(assembly => !assembly.IsDynamic)
            // Remove DigitalRightsManagement.Common assembly to avoid reference conflicts
            .Where(assembly => !assembly.FullName!.Contains("DigitalRightsManagement.Common", StringComparison.Ordinal))
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location));

        var compilation = CSharpCompilation.Create(
            "TestAssembly",
            allSources.Select(source => CSharpSyntaxTree.ParseText(source)),
            references,
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        var generator = new EntityConstructorGenerator();
        GeneratorDriver driver = CSharpGeneratorDriver.Create(generator);
        driver = driver.RunGenerators(compilation);

        var result = driver.GetRunResult();
        var generatedFiles = result.Results.SelectMany(r => r.GeneratedSources)
            .Select(f => (f.HintName, f.SourceText.ToString()))
            .ToList();

        return (compilation.GetDiagnostics(), generatedFiles);
    }
}
